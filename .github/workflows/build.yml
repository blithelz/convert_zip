name: Multi-Platform Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: "Windows_Converter"
            pyinstaller_args: "--noconsole --add-binary 'unrar.exe;.'"
            output_path: "dist/gui_converter.exe"
            shell: pwsh
          - os: macos-latest
            artifact_name: "macOS_Converter"
            pyinstaller_args: "--windowed --osx-bundle-identifier com.example.converter"
            output_path: "dist/Converter.app"
            shell: bash
          - os: ubuntu-latest
            artifact_name: "Linux_Converter"
            pyinstaller_args: "--noconsole"
            output_path: "dist/gui_converter"
            shell: bash
      fail-fast: false  # 允许独立失败

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Windows 专用步骤
    - name: Download unrar for Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://www.rarlab.com/rar/winrar-x64-624.exe" -OutFile "winrar.exe"
        Start-Process -Wait -FilePath ".\winrar.exe" -ArgumentList "/S"
        Copy-Item "C:\Program Files\WinRAR\UnRAR.exe" -Destination "unrar.exe"

    # macOS/Linux 依赖安装
    - name: Install system dependencies
      if: matrix.os != 'windows-latest'
      shell: ${{ matrix.shell }}
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install unrar
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y unrar
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      shell: ${{ matrix.shell }}
      run: |
        pyinstaller ${{ matrix.pyinstaller_args }} \
          --name "Converter" \
          --icon "assets/icon.ico" \
          --add-data "assets/*:assets" \
          --clean \
          gui_converter.py

        # macOS 应用签名（伪签名）
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          codesign --force --deep -s - "dist/Converter.app"
        fi

    - name: Package artifacts
      shell: ${{ matrix.shell }}
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          ditto -c -k --sequesterRsrc --keepParent "dist/Converter.app" "Converter_macOS.zip"
        else
          7z a "${{ matrix.artifact_name }}.7z" "${{ matrix.output_path }}"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.output_path }}
          *.7z
          *.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          artifacts/**/*
